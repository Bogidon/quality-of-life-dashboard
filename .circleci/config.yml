# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1
jobs:
  build:
    docker:
      - image: circleci/node:14-browsers

    working_directory: ~/repo

    steps:
      - checkout
      - run: git clone https://github.com/DataWorks-NC/durham-quality-of-life-data.git data
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v3-dependencies-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v3-dependencies-

      - run: npm install
      - run: npm install --only=dev

      - run:
          name: Run jest tests
          command: npm run test

      # Install puppeteer dependencies. TODO: Consider using https://circleci.com/orbs/registry/orb/threetreeslight/puppeteer.
      - run:
          name: Install Headless Chrome dependencies
          command: |
            sudo apt-get install -yq \
            gconf-service libasound2 libatk1.0-0 libatk-bridge2.0-0 libc6 libcairo2 libcups2 libdbus-1-3 \
            libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 \
            libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 \
            libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates \
            fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget
      - run:
          name: Install puppeteer with chronium
          command: |
            npm i puppeteer

      - save_cache:
          paths:
            - node_modules
          key: v3-dependencies-{{ checksum "package.json" }}

      # run tests!
      - run: npm run build-site
      - run: npx bundlesize

      # Performance test
      - run: sudo npm install -g @lhci/cli@0.5.x
      - run: |
            if [ "$CIRCLECI_BRANCH" = "main" ]; then
              lhci autorun --uploadUrlMap
            else
              lhci autorun
            fi

      # Generate a sitemap based on what's currently on dev site.
      - run: |
          if [ "$CIRCLE_BRANCH" = "main" ]; then
            npm run build-sitemap-dev
          fi

      - run: mkdir /tmp/workspace
      - persist_to_workspace:
          root: .
          paths:
            - dist/*
            - .circleci/*

  deploy_prod: &DEPLOY_PROD
    docker:
      - image: mcr.microsoft.com/azure-cli
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          command: pip install -r .circleci/requirements.txt
          working_directory: /tmp/workspace/

      # Add robots file for production.
      - run: cp /tmp/workspace/.circleci/robots-prod.txt /tmp/workspace/dist/robots.txt

      # Tweak sitemap URLs
      - run: sed -i 's/nbhdcompassdev\.azurewebsites\.us/compass\.durhamnc\.gov/g' /tmp/workspace/dist/sitemap.xml

      # Push code to Azure blob storage
      - run:
          command: python .circleci/deploy.py /tmp/workspace/dist
          working_directory: /tmp/workspace/
          environment:
            AZURE_DESTINATION_BLOB: "prod"

  deploy_dev:
    docker:
      - image: mcr.microsoft.com/azure-cli
    steps:
      - attach_workspace:
          at: /tmp/workspace

      - run:
          command: pip install -r .circleci/requirements.txt
          working_directory: /tmp/workspace/
      - run:
          command: python .circleci/deploy.py /tmp/workspace/dist
          working_directory: /tmp/workspace/
          environment:
            AZURE_DESTINATION_BLOB: "dev"

  deploy_stage:
    docker:
      - image: mcr.microsoft.com/azure-cli
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          command: pip install -r .circleci/requirements.txt
          working_directory: /tmp/workspace/
      - run:
          command: python .circleci/deploy.py /tmp/workspace/dist
          working_directory: /tmp/workspace/
          environment:
            AZURE_DESTINATION_BLOB: "stage"

workflows:
  version: 2.1
  build_and_deploy:
    jobs:
      - build
      - deploy_stage:
          requires:
            - build
          filters:
            branches:
              only:
                staging
      - deploy_dev:
          requires:
            - build
          filters:
            branches:
              only:
                develop

      - deploy_prod:
          requires:
            - build
          filters:
            branches:
              only:
                main
